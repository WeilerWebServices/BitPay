#!/usr/bin/env node

var program = require('commander');
var bignum = require('bignum');
var BitcoinRPC = require('bitcore/RpcClient').class();
var coinUtil = require('bitcore/util/util');
var Transaction = require('bitcore/Transaction').class();

var PROGRAM_VERSION = '0.1';
var WALLET_ACCOUNT = 'coin-consolidation';
var CONSOL_N_TX = 10;

program
	.version(PROGRAM_VERSION)
	.option('--maxcoinval [value]', 'Ignore coins greater than this value [10.0]', Number, 10.0)
	.option('--rpcport [port]', 'Bitcoind RPC port [18332]', Number, 18332)
	.option('--rpcuser [user]', 'Bitcoind RPC user [user]', String, 'user')
	.option('--rpcpass [password]', 'Bitcoind RPC password [pass]', String, 'pass')
	.parse(process.argv);

var rpc = new BitcoinRPC({
		'port' : program.rpcport,
		'user' : program.rpcuser,
		'pass' : program.rpcpass,
		'protocol' : 'http'
});

function get_unspent()
{
	console.log("Download list of unspent coins...");
	rpc.listUnspent(unspent_cb);
}

function unspent_cb(err, resp)
{
	if (err) throw new Error(err['message']);
	var unspent_coins = resp['result'];

	filter_unspent(unspent_coins);
}

function coins_by_value(a, b)
{
	var bnA = bignum(a.amount);
	var bnB = bignum(b.amount);
	return bnA.cmp(bnB);
}

function filter_unspent(unspent_coins)
{
	console.log("Culling list of unspent coins...");

	var decimal = program.maxcoinval.toString();
	var maxBn = coinUtil.parseValue(decimal);

	var tmp = [];
	for (var i = 0; i < unspent_coins.length; i++) {
		var obj = unspent_coins[i];
		decimal = obj.amount.toString();
		var bn = coinUtil.parseValue(decimal);

		// filter out everything above --maxcoinval
		if (bn.gt(maxBn))
			continue;

		// convert amount to a string of satoshis
		obj.amount = bn.toString();

		tmp.push(obj);
	}

	unspent_coins = tmp;

	// sort by value
	unspent_coins.sort(coins_by_value);

	if (unspent_coins.length < 2) {
		console.log("No unspent coins to defragment. Exiting.");
		return;
	}

	prep_address(unspent_coins);
}

function prep_address(unspent_coins)
{
	console.log("Getting destination address...");

	// get destination address for coin consolidation
	rpc.getAccountAddress(WALLET_ACCOUNT, function(err, resp) {
		if (err) throw new Error(err['message']);
		var destAddr = resp['result'];

		console.log("   " + destAddr);

		reduce_unspent(destAddr, unspent_coins);
	});
}

function reduce_unspent(destAddr, unspent_coins)
{
	console.log("Building final list of coins for consolidation TX");

	if (unspent_coins.length > CONSOL_N_TX) {
		var tmp = [];

		// first N (lowest value)
		for (var i = 0; i < (CONSOL_N_TX-1) && i < unspent_coins.length; i++)
			tmp.push(unspent_coins[i]);

		// last 1 (highest value)
		tmp.push(unspent_coins[unspent_coins.length - 1]);

		unspent_coins = tmp;
	}

	var total = bignum(0);
	var fmtVal = undefined;
	
	// list final coins for consolidation TX; build total TX value
	for (var i = 0; i < unspent_coins.length; i++) {
		var bnTmp = bignum(unspent_coins[i].amount);

		fmtVal = coinUtil.formatValue(coinUtil.bigIntToValue(bnTmp));
		console.log("   " + fmtVal + " " +
			    unspent_coins[i].txid + " " +
			    unspent_coins[i].vout);

		total = total.add(bnTmp);
	}

	fmtVal = coinUtil.formatValue(coinUtil.bigIntToValue(total));
	console.log("total value consolidated: " + fmtVal);

	build_raw_tx(destAddr, fmtVal, unspent_coins);
}

function build_raw_tx(destAddr, fmtVal, unspent_coins)
{
	var inputs = [];
	var outputs = {};

	for (var i = 0; i < unspent_coins.length; i++) {
		var obj = {};
		obj.txid = unspent_coins[i].txid;
		obj.vout = unspent_coins[i].vout;
		inputs.push(obj);
	}

	outputs[destAddr] = fmtVal;

	var txObj = {
		inputs:	inputs,
		outputs: outputs,
	};

	var tx = new Transaction();
	tx.fromObj(txObj);

	var rawHex = tx.serialize().toString('hex');
	var binBytes = rawHex.length / 2;

	console.log("Raw transaction (" + binBytes.toString() +
		    "b), sans signatures:");
	console.log(rawHex);
}

function main()
{
	get_unspent();
}

main();

